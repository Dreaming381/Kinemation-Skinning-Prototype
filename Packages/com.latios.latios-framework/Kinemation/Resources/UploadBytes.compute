// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UploadBytes

uniform ByteAddressBuffer _src;
uniform RWByteAddressBuffer _dst;

uniform ByteAddressBuffer _meta;

uint _elementSizeInBytes;
uint _startOffset;

[numthreads(64, 1, 1)]
void UploadBytes(uint threadId : SV_GroupIndex, uint3 groupIds : SV_GroupID)
{
    uint3 m = _meta.Load3((groupIds.x + _startOffset) * 12);

    uint srcBase = m.x;
    uint dstBase = m.y;
    uint elementCount = (m.z * _elementSizeInBytes) / 16;
    uint elementCountTail = m.z * _elementSizeInBytes - elementCount * 16;
    elementCountTail /= 4;

    uint i;
    for (i = 0; i < elementCount - 64; i += 64)
    {
        uint4 val = _src.Load4((srcBase + i + threadId) * 16);
        _dst.Store4((dstBase + i + threadId) * 16, val);
    }

    if (i + threadId < elementCount)
    {
        uint4 val = _src.Load4((srcBase + i + threadId) * 16);
        _dst.Store4((dstBase + i + threadId) * 16, val);
    }

    if (threadId < elementCountTail)
    {
        uint target = elementCount * 16 + threadId * 4;
        uint val = _src.Load(target);
        _dst.Store(target, val);
    }
}
