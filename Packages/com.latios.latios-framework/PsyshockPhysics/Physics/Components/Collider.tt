<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>
<#@ output extension=".gen.cs" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Collider.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Mathematics;

namespace Latios.PhysicsEngine
{
    public unsafe partial struct Collider : IComponentData, ICollider
	{
		#region TypeCasting
<#
{
    var allTypes = new string[] 
	{
        "Sphere",
		"Capsule",
		"Box",
		"Triangle",
		"Quad"
    };
	
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
		public unsafe static implicit operator Collider(<#=type#>Collider <#=lowerType#>Collider)
        {
            Collider collider = default;
            collider.m_type   = ColliderType.<#=type#>;
            UnsafeUtility.CopyStructureToPtr(ref <#=lowerType#>Collider, &collider.m_storage);
            return collider;
        }

        public unsafe static implicit operator <#=type#>Collider(Collider collider)
        {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
            if (collider.m_type != ColliderType.<#=type#>)
                throw new InvalidOperationException("Error: Collider is not a ConvexCollider but is being casted to one.");
#endif

            <#=type#>Collider <#=lowerType#> = default;
            UnsafeUtility.CopyPtrToStructure(&collider.m_storage, out <#=lowerType#>);
            return <#=lowerType#>;
        }

<#
	}
#>
		#endregion TypeCasting

		#region ICollider		
		public AABB CalculateAABB(RigidTransform transform)
        {
            switch (m_type)
            {
<#
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
				case ColliderType.<#=type#>:
                    <#=type#>Collider <#=lowerType#> = this;
                    return <#=lowerType#>.CalculateAABB(transform);
<#
	}
#>
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public GjkSupportPoint GetSupportPoint(float3 direction)
        {
            switch (m_type)
            {
<#
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
				case ColliderType.<#=type#>:
                    <#=type#>Collider <#=lowerType#> = this;
                    return <#=lowerType#>.GetSupportPoint(direction);
<#
	}
#>
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public GjkSupportPoint GetSupportPoint(float3 direction, RigidTransform bInASpace)
        {
            switch (m_type)
            {
<#
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
				case ColliderType.<#=type#>:
                    <#=type#>Collider <#=lowerType#> = this;
                    return <#=lowerType#>.GetSupportPoint(direction, bInASpace);
<#
	}
#>
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public float3 GetPointBySupportIndex(int index)
        {
            switch (m_type)
            {
<#
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
				case ColliderType.<#=type#>:
                    <#=type#>Collider <#=lowerType#> = this;
                    return <#=lowerType#>.GetPointBySupportIndex(index);
<#
	}
#>
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		public AABB GetSupportAabb()
        {
            switch (m_type)
            {
<#
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
				case ColliderType.<#=type#>:
                    <#=type#>Collider <#=lowerType#> = this;
                    return <#=lowerType#>.GetSupportAabb();
<#
	}
#>
				default:
					throw new InvalidOperationException("Type not supported yet");
			}
		}

		#endregion ICollider
<#
}
#>
	}
}