<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".gen.cs" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Physics/Utilities/Physics.ColliderCastDispatch.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Mathematics;

namespace Latios.Psyshock
{
	public static partial class Physics
	{
<#
{
    var allTypes = new string[] 
	{
        "Sphere",
		"Capsule",
		"Box",
		"Triangle",
		//"Quad", 
		"Convex",
		"Compound"
    };
	
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
		public static bool ColliderCast(Collider colliderToCast, RigidTransform castStart, float3 castEnd, <#=type#>Collider target<#=type#>, RigidTransform target<#=type#>Transform, out ColliderCastResult result)
		{
			switch (colliderToCast.type)
			{
<#
		foreach (var type2 in allTypes)
		{
#>
				case ColliderType.<#=type2#>: 
				{
					<#=type2#>Collider col = colliderToCast;
					return ColliderCast(col, castStart, castEnd, target<#=type#>, target<#=type#>Transform, out result);
				}
<#
		}
#>
				default:
					result = default;
					return false;
			}
		}

		public static bool ColliderCast(<#=type#>Collider <#=lowerType#>ToCast, RigidTransform castStart, float3 castEnd, Collider targetCollider, RigidTransform targetTransform, out ColliderCastResult result)
		{
			switch (targetCollider.type)
			{
<#
		foreach (var type2 in allTypes)
		{
#>
				case ColliderType.<#=type2#>: 
				{
					<#=type2#>Collider col = targetCollider;
					return ColliderCast(<#=lowerType#>ToCast, castStart, castEnd, col, targetTransform, out result);
				}
<#
		}
#>
				default:
					result = default;
					return false;
			}
		}
<#
	}
#>

		public static bool ColliderCast(Collider colliderToCast, RigidTransform castStart, float3 castEnd, Collider targetCollider, RigidTransform targetTransform, out ColliderCastResult result)
		{
			switch (colliderToCast.type)
			{
<#
	foreach (var type in allTypes) 
	{
#>
				case ColliderType.<#=type#>: 
				{
					<#=type#>Collider colA = colliderToCast;
					return ColliderCast(colA, castStart, castEnd, targetCollider, targetTransform, out result);
				}
<#
	}
#>
				default:
					result = default;
					return false;
			}
		}
<#
}
#>
	}
}