<#/*THIS IS A T4 FILE - see t4_text_templating.md for what it is and how to run codegen*/#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".gen.cs" #>
<#@ assembly name="System.Collections" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     TextTransform Physics/Utilities/Physics.DistanceBetweenDispatch.tt
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Unity.Mathematics;

namespace Latios.Psyshock
{
	public static partial class Physics
	{
<#
{
    var allTypes = new string[] 
	{
        "Sphere",
		"Capsule",
		"Box",
		"Triangle",
		//"Quad",
		"Convex",
		"Compound"
    };
	
	foreach (var type in allTypes) 
	{
		string lowerType = type.ToLower();
#>
		public static bool DistanceBetween(Collider collider, RigidTransform colliderTransform, <#=type#>Collider <#=lowerType#>, RigidTransform <#=lowerType#>Transform, float maxDistance, out ColliderDistanceResult result)
		{
			switch (collider.type)
			{
<#
		foreach (var type2 in allTypes)
		{
#>
				case ColliderType.<#=type2#>: 
				{
					<#=type2#>Collider col = collider;
					return DistanceBetween(col, colliderTransform, <#=lowerType#>, <#=lowerType#>Transform, maxDistance, out result);
				}
<#
		}
#>
				default:
					result = default;
					return false;
			}
		}

		public static bool DistanceBetween(<#=type#>Collider <#=lowerType#>, RigidTransform <#=lowerType#>Transform, Collider collider, RigidTransform colliderTransform, float maxDistance, out ColliderDistanceResult result)
		{
			switch (collider.type)
			{
<#
		foreach (var type2 in allTypes)
		{
#>
				case ColliderType.<#=type2#>: 
				{
					<#=type2#>Collider col = collider;
					return DistanceBetween(<#=lowerType#>, <#=lowerType#>Transform, col, colliderTransform, maxDistance, out result);
				}
<#
		}
#>
				default:
					result = default;
					return false;
			}
		}
<#
	}
#>

		public static bool DistanceBetween(Collider colliderA, RigidTransform aTransform, Collider colliderB, RigidTransform bTransform, float maxDistance, out ColliderDistanceResult result)
		{
			switch (colliderA.type)
			{
<#
	foreach (var type in allTypes) 
	{
#>
				case ColliderType.<#=type#>: 
				{
					<#=type#>Collider colA = colliderA;
					return DistanceBetween(colA, aTransform, colliderB, bTransform, maxDistance, out result);
				}
<#
	}
#>
				default:
					result = default;
					return false;
			}
		}

		public static bool DistanceBetween(float3 point, Collider collider, RigidTransform colliderTransform, float maxDistance, out PointDistanceResult result)
		{
			switch (collider.type)
			{
<#
	foreach (var type in allTypes) 
	{
#>
				case ColliderType.<#=type#>: 
				{
					<#=type#>Collider colA = collider;
					return DistanceBetween(point, colA, colliderTransform, maxDistance, out result);
				}
<#
	}
#>
				default:
					result = default;
					return false;
			}
		}
<#
}
#>
	}
}